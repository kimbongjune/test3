<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-4.3.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />
	<resources mapping="/uploads/**" location="/uploads/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	<beans:bean id="jsonView" class="org.springframework.web.servlet.view.json.MappingJackson2JsonView">
		<beans:property name="contentType" value="application/json;charset=UTF-8" />
	</beans:bean>
	
	<context:component-scan base-package="com.example.ezen" />
	
	<!-- 파일업로드 설정 -->
	<beans:bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<beans:property name="maxUploadSize" value="10000000" />
	</beans:bean>
	
	<!-- 인터셉터 설정 -->
	<interceptors>
		<interceptor>
			<mapping path="/**"/>
			<exclude-mapping path="/user/login"/>
			<exclude-mapping path="/user/id-check"/>
			<exclude-mapping path="/"/>
			<exclude-mapping path="/test"/>
			<exclude-mapping path="/rest/**"/>
			<exclude-mapping path="/user/signup"/>
			<exclude-mapping path="/board/boards/**"/>
			<exclude-mapping path="/resources/**"/>
			<exclude-mapping path="/uploads/**"/>
			<beans:bean class="com.example.ezen.interceptor.SessionInterceptor" />
		</interceptor>
	</interceptors>
	
	<!-- 
		스케줄러
		주기적으로 특정 클래스의 특정 메서드를 실행할 수 있는 기능
		주기(리눅스의 crontab 문법)
	-->
	
	<beans:bean id="task" class="com.example.ezen.Task" />
	
	<!-- @Scheduled 활성화(없어도 됨) -->
	<!-- <task:annotation-driven/>
	
	xml기반 스케줄러 등록
	<task:scheduled-tasks>
		<task:scheduled ref="task" method="execute" cron="0/5 * * * * *" />
		
			crontab은
			초 분 시 일 월 요일  
			0/5 * * * * * -> 5초마다
			5 * * * * * -> 매분 5초
			0 15 10 * * * -> 매일 오전 10시 15분에 실행
			0 0 12 * * MON -> 매주 월요일 12시에 실행
			0 0 8 1 * * -> 매월 1일 오전8시에 실행
			0 0 0 25 12 * -> 매년 12월 25일 자정에 실행
		
	</task:scheduled-tasks> -->
	
	<!-- 
		http요청 객체 bean으로 생성
		spring 4.x버전에서 사용하는 restTemplate 
	-->
	<beans:bean 
		id="restTemplate"
	 	class="org.springframework.web.client.RestTemplate" 
 	/>
 	
 	<!-- 스프링 시큐리티 암호화 클래스 bean 등록 -->
 	<beans:bean class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder" />
	
</beans:beans>
